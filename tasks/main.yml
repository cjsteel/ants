---
# tasks file for ansible-role-acemenu

- name: "  debug: var=user_homes"
  debug: var=acemenu_user_homes

- name: "ensure for remote users bin/acemenu directory"
  become: true
  file:
    state : 'directory'
    path  : '{{ item.value.home }}/{{ acemenu_bin_dir }}'
    owner : '{{ item.value.owner }}'
    group : '{{ item.value.group }}'
    mode  : '{{ item.value.mode }}'
  with_dict: "{{ acemenu_user_homes }}"

- name: "ensure for remote users bin/acemenu/helpfiles directory"
  become : true
  file   :
    state   : 'directory'
    path    : '{{ item.value.home }}/{{ acemenu_bin_dir }}'
    owner   : '{{ item.value.owner }}'
    group   : '{{ item.value.group }}'
    mode    : '{{ item.value.mode }}'
  with_dict: '{{ acemenu_user_homes }}'

- name: 'when ansible_distribution == "Ubuntu", template our menu script'
  become: true
  template :
    backup   : yes
    src      : '{{ ansible_distribution }}/{{ ansible_distribution_version }}/acemenu/menu.j2'
    dest     : '{{ item.value.home }}/{{ acemenu_bin_dir }}/menu'
    owner    : '{{ item.value.owner }}'
    group    : '{{ item.value.group }}'
    mode     : '{{ item.value.mode }}'
  with_dict: '{{ acemenu_user_homes }}'
#  when: '{{ ansible_distribution }} == "Ubuntu"'

- name: 'when ansible_distribution == "Ubuntu", template our menu items'
  become: true
  template:
    backup  : yes
    src     : '{{ ansible_distribution }}/{{ ansible_distribution_version }}/acemenu/menuitems.j2'
    dest    : '{{ item.value.home }}/{{ acemenu_bin_dir }}/menuitems.txt'
    owner   : '{{ item.value.owner }}'
    group   : '{{ item.value.group }}'
    mode    : '{{ item.value.mode }}'
  with_dict : '{{ acemenu_user_homes }}'
  when: ansible_distribution == "Ubuntu" 

- name: 'when ansible_distribution == "CentOS", template our menu items'
  become: true
  template:
    backup  : yes
    src     : '{{ ansible_distribution }}/{{ ansible_distribution_major_version }}/acemenu/menuitems.j2'
    dest    : '{{ item.value.home }}/{{ acemenu_bin_dir }}/menuitems.txt'
    owner   : '{{ item.value.owner }}'
    group   : '{{ item.value.group }}'
    mode    : '{{ item.value.mode }}'
  with_dict: "{{ acemenu_user_homes }}"
  when: ansible_distribution == "CentOS" 

# helpfiles

- name: 'copy over our help files'
  become: true
  copy:
    backup  : no
    force   : yes # overwrites any existing file(s).
    src     : 'templates/{{ ansible_distribution }}/{{ ansible_distribution_major_version }}/acemenu/helpfiles/'
    dest    : '{{ item.value.home }}/{{ acemenu_bin_dir }}/helpfiles/'
    owner   : '{{ item.value.owner }}'
    group   : '{{ item.value.group }}'
    mode    : '{{ item.value.mode }}'
  with_dict : "{{ acemenu_user_homes }}"
  when: ansible_distribution == "CentOS"

- name: 'copy over our help files'
  become: true
  copy:
    directory_mode : yes
    backup  : no
    force   : yes # overwrites any existing file(s)
    src     : 'templates/{{ ansible_distribution }}/{{ ansible_distribution_version }}/acemenu/helpfiles/'
    dest    : '{{ item.value.home }}/{{ acemenu_bin_dir }}/helpfiles/'
    owner   : '{{ item.value.owner }}'
    group   : '{{ item.value.group }}'
    mode    : '{{ item.value.mode }}'
  with_dict : "{{ acemenu_user_homes }}"
  when: ansible_distribution == "Ubuntu"

# .bashrc
#
# Currently if the user does not have a .bashrc this module fails in order to aid in the identification
# of issues where 'non-standard/regular' users have been setup on the target host.

- name: "ensure for our path block in ~/.bashrc"
  become: true
  blockinfile:
    dest    : '{{ item.value.home }}/.bashrc'
    owner   : '{{ item.value.owner }}'
    group   : '{{ item.value.group }}'
    mode    : '{{ item.value.mode }}'
    state   : 'present'
    insertafter: EOF
    marker: '# {mark} ANSIBLE MANAGED BLOCK'
    block: |
      # set PATH to include '{{ item.value.home }}/{{ acemenu_bin_dir }}'
      if [ -d {{ item.value.home }}/{{ acemenu_bin_dir }} ] ; then
         PATH={{ item.value.home }}/{{ acemenu_bin_dir }}:${PATH} 
      fi
  with_dict: "{{ acemenu_user_homes }}"
  when: ansible_distribution == "Ubuntu" 

# if the above did not fail and halt execution then we will create ~/.bash_aliases
# and an entry for it in ~/.bashrc

- name: "CentOS - ensure for ~/.bash_aliases source in ~/.bashrc"
  become: true
  blockinfile:
    dest    : '{{ item.value.home }}/.bashrc'
    owner   : '{{ item.value.owner }}'
    group   : '{{ item.value.group }}'
    mode    : '{{ item.value.mode }}'
    state   : 'present'
    insertafter: EOF
    marker: '# {mark} ANSIBLE MANAGED BLOCK'
    block: |
      # add source ~/.bash_aliases to ~/.bashrc
      #
      if [ -f ~/.bash_aliases ]; then
          . ~/.bash_aliases
      fi
      # set PATH to include '{{ item.value.home }}/{{ acemenu_bin_dir }}'
      if [ -d {{ item.value.home }}/{{ acemenu_bin_dir }} ] ; then
         PATH={{ item.value.home }}/{{ acemenu_bin_dir }}:${PATH} 
      fi
  with_dict: "{{ acemenu_user_homes }}"
  when: ansible_distribution == "CentOS" 

- name: "ensure for ~/.bash_aliases"
  become: true
  file:
    state   : 'touch'
    path    : '{{ item.value.home }}/.bash_aliases'
    owner   : '{{ item.value.owner }}'
    group   : '{{ item.value.group }}'
    mode    : '{{ item.value.mode }}'
  with_dict: "{{ acemenu_user_homes }}"

- name: "ensure for menu message block in ~/.bash_aliases"
  become: true
  blockinfile:
    dest    : '{{ item.value.home }}/.bash_aliases'
    owner   : '{{ item.value.owner }}'
    group   : '{{ item.value.group }}'
    mode    : '0644'
    create  : 'yes'
    state   : 'present'
    marker: '# {mark} ANSIBLE MANAGED BLOCK'
    insertafter: EOF
    block: |
      alias aceactivate='source activate ansible-1.9.0.1'
  with_dict: "{{ acemenu_user_homes }}"



